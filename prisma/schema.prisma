// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Session {
  id        String   @id
  sid       String   @unique
  data      String   @db.Text
  expiresAt DateTime
}

// schema.prisma

model User {
  id           Int     @id @default(autoincrement())
  username     String  @unique
  password     String
  rootFolder   Folder? @relation("UserRootFolder", fields: [rootFolderId], references: [id])
  rootFolderId Int?    @unique

  folders Folder[] // <-- Name the reverse relation
}

model Folder {
  id Int @id @default(autoincrement())

  name String

  // Each folder belongs to a specific user.

  // This is a standard foreign key for ownership.

  user User @relation(fields: [userId], references: [id]) // Changed to non-nullable (Int)

  userId Int // Each folder MUST have an owner

  // This is the relation for the User's root folder.

  // This field identifies if THIS folder is THE root folder for a user.

  // It effectively makes the 'rootFolder' property in User point to this specific folder.

  // Only ONE folder per user will have its 'userRoot' relation pointing back to the User's 'rootFolder'.

  userRoot User? @relation("UserRootFolder") // This side of the 1-to-1 relation

  // Self-referencing for nested folders

  parent Folder? @relation("FolderToSubfolders", fields: [parentId], references: [id], onDelete: Cascade)

  parentId Int? // Null for root folders

  children Folder[] @relation("FolderToSubfolders")

  files File[]

  // A user cannot have two folders with the same name in the same parent

  @@unique([parentId, name, userId]) // Added userId to the unique constraint
}

model File {
  id         Int      @id @default(autoincrement())
  name       String
  size       Int
  uuid       String
  uploadTime DateTime @default(now())
  parent     Folder   @relation(fields: [parentId], references: [id], onDelete: Cascade)
  parentId   Int

  @@unique([parentId, name])
}
